{"ast":null,"code":"var _jsxFileName = \"/Users/przemyslawrakotny/Documents/przemokoduje/full_projects/ai-buddy-mindfull-app/client/src/screens/BreathingSession.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport BreathingAnimation from '../components/BreathingAnimation';\nimport ControlPanel from '../components/ControlPanel';\nimport './BreathingSession.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BreathingSession = () => {\n  _s();\n  var _location$state;\n  const navigate = useNavigate();\n  const location = useLocation();\n  const durationInSeconds = ((_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.duration) || 60;\n  const cycleTime = 8000;\n\n  // === NOWY, ZUNIFIKOWANY ZESTAW STANÓW ===\n  const [isReady, setIsReady] = useState(false); // Czy faza \"Get ready...\" minęła?\n  const [isPaused, setIsPaused] = useState(false); // Czy sesja jest spauzowana przez użytkownika?\n  const [remainingTime, setRemainingTime] = useState(durationInSeconds);\n  const [text, setText] = useState('Inhale');\n\n  // Efekt 1: Jednorazowy timer na fazę \"Get ready...\"\n  useEffect(() => {\n    const readyTimer = setTimeout(() => {\n      setIsReady(true);\n    }, 3000);\n    return () => clearTimeout(readyTimer);\n  }, []); // Uruchamia się tylko raz\n\n  // Efekt 2: Główny timer sesji (odliczanie)\n  useEffect(() => {\n    // Działa tylko gdy faza \"Get Ready\" minęła I sesja nie jest spauzowana\n    if (isReady && !isPaused && remainingTime > 0) {\n      const interval = setInterval(() => {\n        setRemainingTime(prevTime => prevTime - 1);\n      }, 1000);\n      return () => clearInterval(interval);\n    }\n    // Jeśli czas się skończy, zakończ sesję\n    if (remainingTime <= 0) {\n      navigate('/breathe');\n    }\n  }, [isReady, isPaused, remainingTime, navigate]);\n\n  // Efekt 3: Timer do zmiany tekstu Inhale/Exhale\n  useEffect(() => {\n    // Działa tylko gdy faza \"Get Ready\" minęła I sesja nie jest spauzowana\n    if (isReady && !isPaused) {\n      // Ustawiamy tekst na \"Inhale\" na początku i po każdej pauzie\n      setText('Inhale');\n      const textInterval = setInterval(() => {\n        setText(prevText => prevText === 'Inhale' ? 'Exhale' : 'Inhale');\n      }, cycleTime / 2);\n      return () => clearInterval(textInterval);\n    }\n  }, [isReady, isPaused]); // Zależny od gotowości i pauzy\n\n  // Funkcja do pauzowania pozostaje bez zmian\n  const handlePlayPause = () => {\n    // Nie pozwalamy na pauzę w trakcie \"Get ready...\"\n    if (isReady) {\n      setIsPaused(prevState => !prevState);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"session-screen\",\n    children: [/*#__PURE__*/_jsxDEV(BreathingAnimation, {\n      isPaused: isPaused,\n      isReady: isReady,\n      text: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"session-screen__panel-wrapper\",\n      children: /*#__PURE__*/_jsxDEV(ControlPanel, {\n        onPlayPause: handlePlayPause\n        // Przycisk jest w stanie \"playing\" od razu po wejściu na ekran\n        ,\n        isPlaying: !isPaused\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n_s(BreathingSession, \"GXHX4zYhaGodxgHS6pyI8V0engA=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = BreathingSession;\nexport default BreathingSession;\nvar _c;\n$RefreshReg$(_c, \"BreathingSession\");","map":{"version":3,"names":["React","useEffect","useState","useLocation","useNavigate","BreathingAnimation","ControlPanel","jsxDEV","_jsxDEV","BreathingSession","_s","_location$state","navigate","location","durationInSeconds","state","duration","cycleTime","isReady","setIsReady","isPaused","setIsPaused","remainingTime","setRemainingTime","text","setText","readyTimer","setTimeout","clearTimeout","interval","setInterval","prevTime","clearInterval","textInterval","prevText","handlePlayPause","prevState","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onPlayPause","isPlaying","_c","$RefreshReg$"],"sources":["/Users/przemyslawrakotny/Documents/przemokoduje/full_projects/ai-buddy-mindfull-app/client/src/screens/BreathingSession.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport BreathingAnimation from '../components/BreathingAnimation';\nimport ControlPanel from '../components/ControlPanel';\nimport './BreathingSession.scss';\n\nconst BreathingSession = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const durationInSeconds = location.state?.duration || 60;\n  const cycleTime = 8000;\n\n  // === NOWY, ZUNIFIKOWANY ZESTAW STANÓW ===\n  const [isReady, setIsReady] = useState(false);       // Czy faza \"Get ready...\" minęła?\n  const [isPaused, setIsPaused] = useState(false);      // Czy sesja jest spauzowana przez użytkownika?\n  const [remainingTime, setRemainingTime] = useState(durationInSeconds);\n  const [text, setText] = useState('Inhale');\n\n  // Efekt 1: Jednorazowy timer na fazę \"Get ready...\"\n  useEffect(() => {\n    const readyTimer = setTimeout(() => {\n      setIsReady(true);\n    }, 3000);\n    return () => clearTimeout(readyTimer);\n  }, []); // Uruchamia się tylko raz\n\n  // Efekt 2: Główny timer sesji (odliczanie)\n  useEffect(() => {\n    // Działa tylko gdy faza \"Get Ready\" minęła I sesja nie jest spauzowana\n    if (isReady && !isPaused && remainingTime > 0) {\n      const interval = setInterval(() => {\n        setRemainingTime(prevTime => prevTime - 1);\n      }, 1000);\n      return () => clearInterval(interval);\n    }\n    // Jeśli czas się skończy, zakończ sesję\n    if (remainingTime <= 0) {\n      navigate('/breathe');\n    }\n  }, [isReady, isPaused, remainingTime, navigate]);\n\n  // Efekt 3: Timer do zmiany tekstu Inhale/Exhale\n  useEffect(() => {\n    // Działa tylko gdy faza \"Get Ready\" minęła I sesja nie jest spauzowana\n    if (isReady && !isPaused) {\n      // Ustawiamy tekst na \"Inhale\" na początku i po każdej pauzie\n      setText('Inhale'); \n      const textInterval = setInterval(() => {\n        setText(prevText => (prevText === 'Inhale' ? 'Exhale' : 'Inhale'));\n      }, cycleTime / 2);\n      return () => clearInterval(textInterval);\n    }\n  }, [isReady, isPaused]); // Zależny od gotowości i pauzy\n\n  // Funkcja do pauzowania pozostaje bez zmian\n  const handlePlayPause = () => {\n    // Nie pozwalamy na pauzę w trakcie \"Get ready...\"\n    if (isReady) {\n      setIsPaused(prevState => !prevState);\n    }\n  };\n\n  return (\n    <div className=\"session-screen\">\n      <BreathingAnimation \n        isPaused={isPaused} \n        isReady={isReady} \n        text={text} \n      />\n      \n      <div className=\"session-screen__panel-wrapper\">\n        <ControlPanel \n          onPlayPause={handlePlayPause}\n          // Przycisk jest w stanie \"playing\" od razu po wejściu na ekran\n          isPlaying={!isPaused} \n        />\n      </div>\n    </div>\n  );\n};\n\nexport default BreathingSession;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,WAAW,EAAEC,WAAW,QAAQ,kBAAkB;AAC3D,OAAOC,kBAAkB,MAAM,kCAAkC;AACjE,OAAOC,YAAY,MAAM,4BAA4B;AACrD,OAAO,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjC,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAAA,IAAAC,eAAA;EAC7B,MAAMC,QAAQ,GAAGR,WAAW,CAAC,CAAC;EAC9B,MAAMS,QAAQ,GAAGV,WAAW,CAAC,CAAC;EAC9B,MAAMW,iBAAiB,GAAG,EAAAH,eAAA,GAAAE,QAAQ,CAACE,KAAK,cAAAJ,eAAA,uBAAdA,eAAA,CAAgBK,QAAQ,KAAI,EAAE;EACxD,MAAMC,SAAS,GAAG,IAAI;;EAEtB;EACA,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGjB,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAO;EACrD,MAAM,CAACkB,QAAQ,EAAEC,WAAW,CAAC,GAAGnB,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAM;EACtD,MAAM,CAACoB,aAAa,EAAEC,gBAAgB,CAAC,GAAGrB,QAAQ,CAACY,iBAAiB,CAAC;EACrE,MAAM,CAACU,IAAI,EAAEC,OAAO,CAAC,GAAGvB,QAAQ,CAAC,QAAQ,CAAC;;EAE1C;EACAD,SAAS,CAAC,MAAM;IACd,MAAMyB,UAAU,GAAGC,UAAU,CAAC,MAAM;MAClCR,UAAU,CAAC,IAAI,CAAC;IAClB,CAAC,EAAE,IAAI,CAAC;IACR,OAAO,MAAMS,YAAY,CAACF,UAAU,CAAC;EACvC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER;EACAzB,SAAS,CAAC,MAAM;IACd;IACA,IAAIiB,OAAO,IAAI,CAACE,QAAQ,IAAIE,aAAa,GAAG,CAAC,EAAE;MAC7C,MAAMO,QAAQ,GAAGC,WAAW,CAAC,MAAM;QACjCP,gBAAgB,CAACQ,QAAQ,IAAIA,QAAQ,GAAG,CAAC,CAAC;MAC5C,CAAC,EAAE,IAAI,CAAC;MACR,OAAO,MAAMC,aAAa,CAACH,QAAQ,CAAC;IACtC;IACA;IACA,IAAIP,aAAa,IAAI,CAAC,EAAE;MACtBV,QAAQ,CAAC,UAAU,CAAC;IACtB;EACF,CAAC,EAAE,CAACM,OAAO,EAAEE,QAAQ,EAAEE,aAAa,EAAEV,QAAQ,CAAC,CAAC;;EAEhD;EACAX,SAAS,CAAC,MAAM;IACd;IACA,IAAIiB,OAAO,IAAI,CAACE,QAAQ,EAAE;MACxB;MACAK,OAAO,CAAC,QAAQ,CAAC;MACjB,MAAMQ,YAAY,GAAGH,WAAW,CAAC,MAAM;QACrCL,OAAO,CAACS,QAAQ,IAAKA,QAAQ,KAAK,QAAQ,GAAG,QAAQ,GAAG,QAAS,CAAC;MACpE,CAAC,EAAEjB,SAAS,GAAG,CAAC,CAAC;MACjB,OAAO,MAAMe,aAAa,CAACC,YAAY,CAAC;IAC1C;EACF,CAAC,EAAE,CAACf,OAAO,EAAEE,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAEzB;EACA,MAAMe,eAAe,GAAGA,CAAA,KAAM;IAC5B;IACA,IAAIjB,OAAO,EAAE;MACXG,WAAW,CAACe,SAAS,IAAI,CAACA,SAAS,CAAC;IACtC;EACF,CAAC;EAED,oBACE5B,OAAA;IAAK6B,SAAS,EAAC,gBAAgB;IAAAC,QAAA,gBAC7B9B,OAAA,CAACH,kBAAkB;MACjBe,QAAQ,EAAEA,QAAS;MACnBF,OAAO,EAAEA,OAAQ;MACjBM,IAAI,EAAEA;IAAK;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACZ,CAAC,eAEFlC,OAAA;MAAK6B,SAAS,EAAC,+BAA+B;MAAAC,QAAA,eAC5C9B,OAAA,CAACF,YAAY;QACXqC,WAAW,EAAER;QACb;QAAA;QACAS,SAAS,EAAE,CAACxB;MAAS;QAAAmB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtB;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAChC,EAAA,CAzEID,gBAAgB;EAAA,QACHL,WAAW,EACXD,WAAW;AAAA;AAAA0C,EAAA,GAFxBpC,gBAAgB;AA2EtB,eAAeA,gBAAgB;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}