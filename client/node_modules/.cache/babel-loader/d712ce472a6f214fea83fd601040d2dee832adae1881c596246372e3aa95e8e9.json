{"ast":null,"code":"var _jsxFileName = \"/Users/przemyslawrakotny/Documents/przemokoduje/full_projects/ai-buddy-mindfull-app/client/src/components/BreathingAnimation.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './BreathingAnimation.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BreathingAnimation = () => {\n  _s();\n  const [text, setText] = useState('Get ready...');\n  const [isReady, setIsReady] = useState(false); // <-- Nowy stan do zarządzania opóźnieniem\n  const cycleTime = 8000; // 8 sekund na cykl (4 wdech, 4 wydech)\n  const textIntervalRef = useRef(null); // Ref do przechowywania ID interwału\n\n  useEffect(() => {\n    // Uruchamiamy timer na 3 sekundy, który ustawi stan gotowości\n    const readyTimer = setTimeout(() => {\n      setIsReady(true);\n    }, 3000);\n\n    // Czyścimy timer, jeśli komponent zostanie odmontowany wcześniej\n    return () => clearTimeout(readyTimer);\n  }, []); // Pusta tablica zależności sprawia, że ten efekt uruchomi się tylko raz\n\n  useEffect(() => {\n    // Ten efekt uruchomi się tylko wtedy, gdy 'isReady' zmieni się na 'true'\n    if (isReady) {\n      // Ustawiamy początkowy tekst i interwał zmiany\n      setText('Inhale');\n      textIntervalRef.current = setInterval(() => {\n        setText('Exhale');\n        setTimeout(() => setText('Inhale'), cycleTime / 2);\n      }, cycleTime);\n    }\n\n    // Czyścimy interwał, gdy komponent jest odmontowywany\n    return () => {\n      if (textIntervalRef.current) {\n        clearInterval(textIntervalRef.current);\n      }\n    };\n  }, [isReady]); // Ten efekt zależy od stanu 'isReady'\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"breathing-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `breathing-circle ${isReady ? 'animating' : ''}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"breathing-text\",\n      children: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(BreathingAnimation, \"Qb7iie0HdvJRhtYtWgIOcuIqHAU=\");\n_c = BreathingAnimation;\nexport default BreathingAnimation;\nvar _c;\n$RefreshReg$(_c, \"BreathingAnimation\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","BreathingAnimation","_s","text","setText","isReady","setIsReady","cycleTime","textIntervalRef","readyTimer","setTimeout","clearTimeout","current","setInterval","clearInterval","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/przemyslawrakotny/Documents/przemokoduje/full_projects/ai-buddy-mindfull-app/client/src/components/BreathingAnimation.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './BreathingAnimation.scss';\n\nconst BreathingAnimation = () => {\n  const [text, setText] = useState('Get ready...');\n  const [isReady, setIsReady] = useState(false); // <-- Nowy stan do zarządzania opóźnieniem\n  const cycleTime = 8000; // 8 sekund na cykl (4 wdech, 4 wydech)\n  const textIntervalRef = useRef(null); // Ref do przechowywania ID interwału\n\n  useEffect(() => {\n    // Uruchamiamy timer na 3 sekundy, który ustawi stan gotowości\n    const readyTimer = setTimeout(() => {\n      setIsReady(true);\n    }, 3000);\n\n    // Czyścimy timer, jeśli komponent zostanie odmontowany wcześniej\n    return () => clearTimeout(readyTimer);\n  }, []); // Pusta tablica zależności sprawia, że ten efekt uruchomi się tylko raz\n\n  useEffect(() => {\n    // Ten efekt uruchomi się tylko wtedy, gdy 'isReady' zmieni się na 'true'\n    if (isReady) {\n      // Ustawiamy początkowy tekst i interwał zmiany\n      setText('Inhale');\n      \n      textIntervalRef.current = setInterval(() => {\n        setText('Exhale');\n        setTimeout(() => setText('Inhale'), cycleTime / 2);\n      }, cycleTime);\n    }\n\n    // Czyścimy interwał, gdy komponent jest odmontowywany\n    return () => {\n      if (textIntervalRef.current) {\n        clearInterval(textIntervalRef.current);\n      }\n    };\n  }, [isReady]); // Ten efekt zależy od stanu 'isReady'\n\n  return (\n    <div className=\"breathing-container\">\n      {/* Dodajemy klasę 'animating', gdy animacja ma wystartować */}\n      <div className={`breathing-circle ${isReady ? 'animating' : ''}`}></div>\n      <p className=\"breathing-text\">{text}</p>\n    </div>\n  );\n};\n\nexport default BreathingAnimation;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAO,2BAA2B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnC,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,cAAc,CAAC;EAChD,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EAC/C,MAAMW,SAAS,GAAG,IAAI,CAAC,CAAC;EACxB,MAAMC,eAAe,GAAGV,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;;EAEtCD,SAAS,CAAC,MAAM;IACd;IACA,MAAMY,UAAU,GAAGC,UAAU,CAAC,MAAM;MAClCJ,UAAU,CAAC,IAAI,CAAC;IAClB,CAAC,EAAE,IAAI,CAAC;;IAER;IACA,OAAO,MAAMK,YAAY,CAACF,UAAU,CAAC;EACvC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAERZ,SAAS,CAAC,MAAM;IACd;IACA,IAAIQ,OAAO,EAAE;MACX;MACAD,OAAO,CAAC,QAAQ,CAAC;MAEjBI,eAAe,CAACI,OAAO,GAAGC,WAAW,CAAC,MAAM;QAC1CT,OAAO,CAAC,QAAQ,CAAC;QACjBM,UAAU,CAAC,MAAMN,OAAO,CAAC,QAAQ,CAAC,EAAEG,SAAS,GAAG,CAAC,CAAC;MACpD,CAAC,EAAEA,SAAS,CAAC;IACf;;IAEA;IACA,OAAO,MAAM;MACX,IAAIC,eAAe,CAACI,OAAO,EAAE;QAC3BE,aAAa,CAACN,eAAe,CAACI,OAAO,CAAC;MACxC;IACF,CAAC;EACH,CAAC,EAAE,CAACP,OAAO,CAAC,CAAC,CAAC,CAAC;;EAEf,oBACEL,OAAA;IAAKe,SAAS,EAAC,qBAAqB;IAAAC,QAAA,gBAElChB,OAAA;MAAKe,SAAS,EAAE,oBAAoBV,OAAO,GAAG,WAAW,GAAG,EAAE;IAAG;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACxEpB,OAAA;MAAGe,SAAS,EAAC,gBAAgB;MAAAC,QAAA,EAAEb;IAAI;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrC,CAAC;AAEV,CAAC;AAAClB,EAAA,CA3CID,kBAAkB;AAAAoB,EAAA,GAAlBpB,kBAAkB;AA6CxB,eAAeA,kBAAkB;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}