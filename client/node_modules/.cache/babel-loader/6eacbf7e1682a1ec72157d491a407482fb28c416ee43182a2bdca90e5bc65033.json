{"ast":null,"code":"var _jsxFileName = \"/Users/przemyslawrakotny/Documents/przemokoduje/full_projects/ai-buddy-mindfull-app/client/src/components/ThoughtIntros.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './ThoughtIntros.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThoughtIntros = ({\n  onComplete\n}) => {\n  _s();\n  const [thoughts, setThoughts] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [isVisible, setIsVisible] = useState(false);\n  useEffect(() => {\n    const fetchThoughts = async () => {\n      try {\n        const response = await fetch('http://localhost:5001/api/get-example-thoughts');\n        const data = await response.json();\n        setThoughts(data);\n      } catch (error) {\n        console.error(\"Nie udało się pobrać myśli, używam zapasowych:\", error);\n        setThoughts([\"...jestem do niczego.\", \"...zawsze wszystko psuję.\", \"...to się na pewno nie uda.\", \"...co oni sobie o mnie pomyślą?\"]);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchThoughts();\n  }, []);\n  useEffect(() => {\n    if (isLoading || thoughts.length === 0) return;\n    setIsVisible(true);\n    const interval = setInterval(() => {\n      setIsVisible(false);\n      setTimeout(() => {\n        setCurrentIndex(prevIndex => {\n          const nextIndex = prevIndex + 1;\n          if (nextIndex >= thoughts.length) {\n            clearInterval(interval);\n            onComplete();\n            return prevIndex;\n          }\n          setIsVisible(true);\n          return nextIndex;\n        });\n      }, 600);\n    }, 2200);\n    return () => clearInterval(interval);\n  }, [isLoading, thoughts, onComplete]);\n\n  // ZMIANA TUTAJ: Modyfikujemy logikę renderowania\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"intro-container\",\n    children: isLoading ?\n    /*#__PURE__*/\n    // Jeśli ładujemy, pokaż wskaźnik\n    _jsxDEV(\"div\", {\n      className: \"intro-loader\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 24\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 37\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this) :\n    /*#__PURE__*/\n    // Jeśli załadowano, pokaż animację myśli\n    _jsxDEV(\"div\", {\n      className: `intro-thought ${isVisible ? 'visible' : ''}`,\n      children: thoughts[currentIndex]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(ThoughtIntros, \"/Ptiootz0bvW623OK4VFWc2qCts=\");\n_c = ThoughtIntros;\nexport default ThoughtIntros;\nvar _c;\n$RefreshReg$(_c, \"ThoughtIntros\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","ThoughtIntros","onComplete","_s","thoughts","setThoughts","isLoading","setIsLoading","currentIndex","setCurrentIndex","isVisible","setIsVisible","fetchThoughts","response","fetch","data","json","error","console","length","interval","setInterval","setTimeout","prevIndex","nextIndex","clearInterval","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/przemyslawrakotny/Documents/przemokoduje/full_projects/ai-buddy-mindfull-app/client/src/components/ThoughtIntros.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './ThoughtIntros.scss';\n\nconst ThoughtIntros = ({ onComplete }) => {\n  const [thoughts, setThoughts] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [isVisible, setIsVisible] = useState(false);\n\n  useEffect(() => {\n    const fetchThoughts = async () => {\n      try {\n        const response = await fetch('http://localhost:5001/api/get-example-thoughts');\n        const data = await response.json();\n        setThoughts(data);\n      } catch (error) {\n        console.error(\"Nie udało się pobrać myśli, używam zapasowych:\", error);\n        setThoughts([\n          \"...jestem do niczego.\",\n          \"...zawsze wszystko psuję.\",\n          \"...to się na pewno nie uda.\",\n          \"...co oni sobie o mnie pomyślą?\"\n        ]);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchThoughts();\n  }, []);\n\n  useEffect(() => {\n    if (isLoading || thoughts.length === 0) return;\n    setIsVisible(true);\n    const interval = setInterval(() => {\n      setIsVisible(false);\n      setTimeout(() => {\n        setCurrentIndex(prevIndex => {\n          const nextIndex = prevIndex + 1;\n          if (nextIndex >= thoughts.length) {\n            clearInterval(interval);\n            onComplete();\n            return prevIndex;\n          }\n          setIsVisible(true);\n          return nextIndex;\n        });\n      }, 600);\n    }, 2200);\n    return () => clearInterval(interval);\n  }, [isLoading, thoughts, onComplete]);\n\n  // ZMIANA TUTAJ: Modyfikujemy logikę renderowania\n  return (\n    <div className=\"intro-container\">\n      {isLoading ? (\n        // Jeśli ładujemy, pokaż wskaźnik\n        <div className=\"intro-loader\">\n          <span></span><span></span><span></span>\n        </div>\n      ) : (\n        // Jeśli załadowano, pokaż animację myśli\n        <div className={`intro-thought ${isVisible ? 'visible' : ''}`}>\n          {thoughts[currentIndex]}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ThoughtIntros;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}