{"ast":null,"code":"var _jsxFileName = \"/Users/przemyslawrakotny/Documents/przemokoduje/full_projects/ai-buddy-mindfull-app/client/src/components/BreathingAnimation.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './BreathingAnimation.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BreathingAnimation = () => {\n  _s();\n  const [text, setText] = useState('Get ready...');\n  const [isReady, setIsReady] = useState(false);\n  const cycleTime = 8000; // 8 sekund na cały cykl\n\n  useEffect(() => {\n    // Ten efekt odpowiada tylko za początkowe opóźnienie\n    const readyTimer = setTimeout(() => {\n      setIsReady(true);\n    }, 3000);\n    return () => clearTimeout(readyTimer);\n  }, []);\n\n  // ZMIANA TUTAJ: Upraszczamy całą logikę zmiany tekstu\n  useEffect(() => {\n    if (isReady) {\n      // 1. Ustaw tekst początkowy na start animacji\n      setText('Inhale');\n\n      // 2. Ustaw interwał, który co 4 sekundy będzie przełączał tekst\n      const textToggleInterval = setInterval(() => {\n        setText(prevText => prevText === 'Inhale' ? 'Exhale' : 'Inhale');\n      }, cycleTime / 2); // Dzielimy przez 2, aby zmiana następowała w połowie cyklu animacji\n\n      // 3. Wyczyść interwał, gdy komponent jest odmontowywany\n      return () => clearInterval(textToggleInterval);\n    }\n  }, [isReady]); // Ten efekt zależy od stanu 'isReady'\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"breathing-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `breathing-circle ${isReady ? 'animating' : ''}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"breathing-text\",\n      children: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n_s(BreathingAnimation, \"+1/phCft+2OFGy3kkM2Q6mUyGDU=\");\n_c = BreathingAnimation;\nexport default BreathingAnimation;\nvar _c;\n$RefreshReg$(_c, \"BreathingAnimation\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","BreathingAnimation","_s","text","setText","isReady","setIsReady","cycleTime","readyTimer","setTimeout","clearTimeout","textToggleInterval","setInterval","prevText","clearInterval","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/przemyslawrakotny/Documents/przemokoduje/full_projects/ai-buddy-mindfull-app/client/src/components/BreathingAnimation.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './BreathingAnimation.scss';\n\nconst BreathingAnimation = () => {\n  const [text, setText] = useState('Get ready...');\n  const [isReady, setIsReady] = useState(false);\n  const cycleTime = 8000; // 8 sekund na cały cykl\n\n  useEffect(() => {\n    // Ten efekt odpowiada tylko za początkowe opóźnienie\n    const readyTimer = setTimeout(() => {\n      setIsReady(true);\n    }, 3000);\n\n    return () => clearTimeout(readyTimer);\n  }, []);\n\n  // ZMIANA TUTAJ: Upraszczamy całą logikę zmiany tekstu\n  useEffect(() => {\n    if (isReady) {\n      // 1. Ustaw tekst początkowy na start animacji\n      setText('Inhale');\n\n      // 2. Ustaw interwał, który co 4 sekundy będzie przełączał tekst\n      const textToggleInterval = setInterval(() => {\n        setText(prevText => (prevText === 'Inhale' ? 'Exhale' : 'Inhale'));\n      }, cycleTime / 2); // Dzielimy przez 2, aby zmiana następowała w połowie cyklu animacji\n\n      // 3. Wyczyść interwał, gdy komponent jest odmontowywany\n      return () => clearInterval(textToggleInterval);\n    }\n  }, [isReady]); // Ten efekt zależy od stanu 'isReady'\n\n  return (\n    <div className=\"breathing-container\">\n      <div className={`breathing-circle ${isReady ? 'animating' : ''}`}></div>\n      <p className=\"breathing-text\">{text}</p>\n    </div>\n  );\n};\n\nexport default BreathingAnimation;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAO,2BAA2B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnC,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,cAAc,CAAC;EAChD,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAMW,SAAS,GAAG,IAAI,CAAC,CAAC;;EAExBV,SAAS,CAAC,MAAM;IACd;IACA,MAAMW,UAAU,GAAGC,UAAU,CAAC,MAAM;MAClCH,UAAU,CAAC,IAAI,CAAC;IAClB,CAAC,EAAE,IAAI,CAAC;IAER,OAAO,MAAMI,YAAY,CAACF,UAAU,CAAC;EACvC,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAX,SAAS,CAAC,MAAM;IACd,IAAIQ,OAAO,EAAE;MACX;MACAD,OAAO,CAAC,QAAQ,CAAC;;MAEjB;MACA,MAAMO,kBAAkB,GAAGC,WAAW,CAAC,MAAM;QAC3CR,OAAO,CAACS,QAAQ,IAAKA,QAAQ,KAAK,QAAQ,GAAG,QAAQ,GAAG,QAAS,CAAC;MACpE,CAAC,EAAEN,SAAS,GAAG,CAAC,CAAC,CAAC,CAAC;;MAEnB;MACA,OAAO,MAAMO,aAAa,CAACH,kBAAkB,CAAC;IAChD;EACF,CAAC,EAAE,CAACN,OAAO,CAAC,CAAC,CAAC,CAAC;;EAEf,oBACEL,OAAA;IAAKe,SAAS,EAAC,qBAAqB;IAAAC,QAAA,gBAClChB,OAAA;MAAKe,SAAS,EAAE,oBAAoBV,OAAO,GAAG,WAAW,GAAG,EAAE;IAAG;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACxEpB,OAAA;MAAGe,SAAS,EAAC,gBAAgB;MAAAC,QAAA,EAAEb;IAAI;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrC,CAAC;AAEV,CAAC;AAAClB,EAAA,CApCID,kBAAkB;AAAAoB,EAAA,GAAlBpB,kBAAkB;AAsCxB,eAAeA,kBAAkB;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}