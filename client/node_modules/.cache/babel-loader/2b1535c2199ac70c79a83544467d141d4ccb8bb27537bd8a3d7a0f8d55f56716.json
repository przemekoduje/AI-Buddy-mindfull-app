{"ast":null,"code":"var _jsxFileName = \"/Users/przemyslawrakotny/Documents/przemokoduje/full_projects/ai-buddy-mindfull-app/client/src/components/ThoughtIntros.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './ThoughtIntros.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThoughtIntros = ({\n  onComplete\n}) => {\n  _s();\n  const [thoughts, setThoughts] = useState([]); // Stan na myśli pobrane z AI\n  const [isLoading, setIsLoading] = useState(true); // Stan ładowania\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [isVisible, setIsVisible] = useState(false);\n\n  // Efekt 1: Pobieranie myśli z backendu przy pierwszym renderowaniu\n  useEffect(() => {\n    const fetchThoughts = async () => {\n      try {\n        const response = await fetch('http://localhost:5001/api/get-example-thoughts');\n        const data = await response.json();\n        setThoughts(data);\n      } catch (error) {\n        console.error(\"Nie udało się pobrać myśli, używam zapasowych:\", error);\n        // Użyj tej samej listy zapasowej, co w backendzie\n        setThoughts([\"...jestem do niczego.\", \"...zawsze wszystko psuję.\", \"...to się na pewno nie uda.\", \"...co oni sobie o mnie pomyślą?\"]);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchThoughts();\n  }, []); // Pusta tablica oznacza, że efekt uruchomi się tylko raz\n\n  // Efekt 2: Uruchomienie animacji PO pobraniu myśli\n  useEffect(() => {\n    if (isLoading || thoughts.length === 0) {\n      return; // Nie rób nic, dopóki dane się nie załadują\n    }\n\n    // Pokaż pierwszą myśl od razu\n    setIsVisible(true);\n    const interval = setInterval(() => {\n      setIsVisible(false); // Rozpocznij znikanie\n      setTimeout(() => {\n        setCurrentIndex(prevIndex => {\n          const nextIndex = prevIndex + 1;\n          if (nextIndex >= thoughts.length) {\n            clearInterval(interval);\n            onComplete(); // Zasygnalizuj koniec animacji\n            return prevIndex;\n          }\n          setIsVisible(true); // Pokaż następną myśl\n          return nextIndex;\n        });\n      }, 600);\n    }, 2200); // Całkowity czas na myśl (wyświetlanie + animacja)\n\n    return () => clearInterval(interval);\n  }, [isLoading, thoughts, onComplete]);\n\n  // Nie renderujemy nic podczas ładowania, aby uniknąć \"mignięcia\"\n  if (isLoading) {\n    return null;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `intro-thought ${isVisible ? 'visible' : ''}`,\n    children: thoughts[currentIndex]\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n_s(ThoughtIntros, \"/Ptiootz0bvW623OK4VFWc2qCts=\");\n_c = ThoughtIntros;\nexport default ThoughtIntros;\nvar _c;\n$RefreshReg$(_c, \"ThoughtIntros\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","ThoughtIntros","onComplete","_s","thoughts","setThoughts","isLoading","setIsLoading","currentIndex","setCurrentIndex","isVisible","setIsVisible","fetchThoughts","response","fetch","data","json","error","console","length","interval","setInterval","setTimeout","prevIndex","nextIndex","clearInterval","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/przemyslawrakotny/Documents/przemokoduje/full_projects/ai-buddy-mindfull-app/client/src/components/ThoughtIntros.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './ThoughtIntros.scss';\n\nconst ThoughtIntros = ({ onComplete }) => {\n  const [thoughts, setThoughts] = useState([]); // Stan na myśli pobrane z AI\n  const [isLoading, setIsLoading] = useState(true); // Stan ładowania\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [isVisible, setIsVisible] = useState(false);\n\n  // Efekt 1: Pobieranie myśli z backendu przy pierwszym renderowaniu\n  useEffect(() => {\n    const fetchThoughts = async () => {\n      try {\n        const response = await fetch('http://localhost:5001/api/get-example-thoughts');\n        const data = await response.json();\n        setThoughts(data);\n      } catch (error) {\n        console.error(\"Nie udało się pobrać myśli, używam zapasowych:\", error);\n        // Użyj tej samej listy zapasowej, co w backendzie\n        setThoughts([\n          \"...jestem do niczego.\",\n          \"...zawsze wszystko psuję.\",\n          \"...to się na pewno nie uda.\",\n          \"...co oni sobie o mnie pomyślą?\"\n        ]);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchThoughts();\n  }, []); // Pusta tablica oznacza, że efekt uruchomi się tylko raz\n\n  // Efekt 2: Uruchomienie animacji PO pobraniu myśli\n  useEffect(() => {\n    if (isLoading || thoughts.length === 0) {\n      return; // Nie rób nic, dopóki dane się nie załadują\n    }\n    \n    // Pokaż pierwszą myśl od razu\n    setIsVisible(true);\n\n    const interval = setInterval(() => {\n      setIsVisible(false); // Rozpocznij znikanie\n      setTimeout(() => {\n        setCurrentIndex(prevIndex => {\n          const nextIndex = prevIndex + 1;\n          if (nextIndex >= thoughts.length) {\n            clearInterval(interval);\n            onComplete(); // Zasygnalizuj koniec animacji\n            return prevIndex;\n          }\n          setIsVisible(true); // Pokaż następną myśl\n          return nextIndex;\n        });\n      }, 600);\n    }, 2200); // Całkowity czas na myśl (wyświetlanie + animacja)\n\n    return () => clearInterval(interval);\n  }, [isLoading, thoughts, onComplete]);\n\n  // Nie renderujemy nic podczas ładowania, aby uniknąć \"mignięcia\"\n  if (isLoading) {\n    return null;\n  }\n\n  return (\n    <div className={`intro-thought ${isVisible ? 'visible' : ''}`}>\n      {thoughts[currentIndex]}\n    </div>\n  );\n};\n\nexport default ThoughtIntros;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9B,MAAMC,aAAa,GAAGA,CAAC;EAAEC;AAAW,CAAC,KAAK;EAAAC,EAAA;EACxC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAC9C,MAAM,CAACS,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAClD,MAAM,CAACW,YAAY,EAAEC,eAAe,CAAC,GAAGZ,QAAQ,CAAC,CAAC,CAAC;EACnD,MAAM,CAACa,SAAS,EAAEC,YAAY,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;;EAEjD;EACAC,SAAS,CAAC,MAAM;IACd,MAAMc,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,gDAAgD,CAAC;QAC9E,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QAClCX,WAAW,CAACU,IAAI,CAAC;MACnB,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,gDAAgD,EAAEA,KAAK,CAAC;QACtE;QACAZ,WAAW,CAAC,CACV,uBAAuB,EACvB,2BAA2B,EAC3B,6BAA6B,EAC7B,iCAAiC,CAClC,CAAC;MACJ,CAAC,SAAS;QACRE,YAAY,CAAC,KAAK,CAAC;MACrB;IACF,CAAC;IAEDK,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER;EACAd,SAAS,CAAC,MAAM;IACd,IAAIQ,SAAS,IAAIF,QAAQ,CAACe,MAAM,KAAK,CAAC,EAAE;MACtC,OAAO,CAAC;IACV;;IAEA;IACAR,YAAY,CAAC,IAAI,CAAC;IAElB,MAAMS,QAAQ,GAAGC,WAAW,CAAC,MAAM;MACjCV,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC;MACrBW,UAAU,CAAC,MAAM;QACfb,eAAe,CAACc,SAAS,IAAI;UAC3B,MAAMC,SAAS,GAAGD,SAAS,GAAG,CAAC;UAC/B,IAAIC,SAAS,IAAIpB,QAAQ,CAACe,MAAM,EAAE;YAChCM,aAAa,CAACL,QAAQ,CAAC;YACvBlB,UAAU,CAAC,CAAC,CAAC,CAAC;YACd,OAAOqB,SAAS;UAClB;UACAZ,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;UACpB,OAAOa,SAAS;QAClB,CAAC,CAAC;MACJ,CAAC,EAAE,GAAG,CAAC;IACT,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;;IAEV,OAAO,MAAMC,aAAa,CAACL,QAAQ,CAAC;EACtC,CAAC,EAAE,CAACd,SAAS,EAAEF,QAAQ,EAAEF,UAAU,CAAC,CAAC;;EAErC;EACA,IAAII,SAAS,EAAE;IACb,OAAO,IAAI;EACb;EAEA,oBACEN,OAAA;IAAK0B,SAAS,EAAE,iBAAiBhB,SAAS,GAAG,SAAS,GAAG,EAAE,EAAG;IAAAiB,QAAA,EAC3DvB,QAAQ,CAACI,YAAY;EAAC;IAAAoB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpB,CAAC;AAEV,CAAC;AAAC5B,EAAA,CApEIF,aAAa;AAAA+B,EAAA,GAAb/B,aAAa;AAsEnB,eAAeA,aAAa;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}