{"ast":null,"code":"var _jsxFileName = \"/Users/przemyslawrakotny/Documents/przemokoduje/full_projects/ai-buddy-mindfull-app/client/src/screens/PerspectiveShiftScreen.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"./PerspectiveShiftScreen.scss\";\n// Nie potrzebujemy już ShatterAnimation, bo kończymy na wniosku AI\n// import ShatterAnimation from '../components/ShatterAnimation';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PerspectiveShiftScreen = () => {\n  _s();\n  const navigate = useNavigate();\n  const [displayText, setDisplayText] = useState(\"Jaka myśl Ci teraz ciąży?\");\n  const [showInput, setShowInput] = useState(true);\n  const [textIsVisible, setTextIsVisible] = useState(true);\n  const [input, setInput] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [messageHistory, setMessageHistory] = useState([]);\n  const handleSendMessage = async e => {\n    e.preventDefault();\n    if (!input.trim() || isLoading) return;\n    const newUserMessage = {\n      role: \"user\",\n      content: input\n    };\n    const updatedHistory = [...messageHistory, newUserMessage];\n    setMessageHistory(updatedHistory);\n    setShowInput(false);\n    setTextIsVisible(false);\n    setIsLoading(true);\n    setTimeout(async () => {\n      let endpoint = \"\";\n      let payload = {};\n\n      // Decydujemy, co robić, na podstawie długości rozmowy\n      if (updatedHistory.length === 1) {\n        // To jest pierwsza wiadomość od użytkownika (negatywna myśl)\n        endpoint = \"/api/get-reframing-question\";\n        payload = {\n          thought: input\n        };\n      } else if (updatedHistory.length === 3) {\n        // To druga wiadomość od użytkownika (odpowiedź na pytanie AI)\n        endpoint = \"/api/get-conclusion\";\n        payload = {\n          negative_thought: updatedHistory[0].content,\n          reframed_thought: input // Wysyłamy odpowiedź jako \"przeformułowanie\"\n        };\n      }\n      try {\n        const response = await fetch(`http://localhost:5001${endpoint}`, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify(payload)\n        });\n        const data = await response.json();\n        const responseText = data.question || data.conclusion;\n        const aiMessage = {\n          role: \"assistant\",\n          content: responseText\n        };\n        setMessageHistory(prev => [...prev, aiMessage]);\n        setIsLoading(false);\n        setDisplayText(responseText);\n        setTextIsVisible(true);\n        if (updatedHistory.length < 3) {\n          // Jeśli to nie jest ostatni krok, pokaż input znowu\n          setShowInput(true);\n        } else {\n          // Jeśli to ostatni krok (wniosek AI), zakończ ćwiczenie\n          //   setTimeout(() => navigate(\"/\"), 300000); // Wróć do domu po 5s\n        }\n      } catch (error) {\n        /* ... obsługa błędu ... */\n      }\n    }, 500);\n    setInput(\"\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"perspective-screen\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"display-text-area\",\n      children: isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"thinking-indicator\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `text-content ${textIsVisible ? \"visible\" : \"hidden\"}`,\n        children: displayText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), showInput && /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSendMessage,\n      className: \"thought-form single-view\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"Wpisz tutaj...\",\n        disabled: isLoading,\n        autoFocus: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: isLoading || !input.trim(),\n        children: \"Wy\\u015Blij\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n_s(PerspectiveShiftScreen, \"SsNamj5mvS+3SImWIFGy809tE5Y=\", false, function () {\n  return [useNavigate];\n});\n_c = PerspectiveShiftScreen;\nexport default PerspectiveShiftScreen;\nvar _c;\n$RefreshReg$(_c, \"PerspectiveShiftScreen\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","jsxDEV","_jsxDEV","PerspectiveShiftScreen","_s","navigate","displayText","setDisplayText","showInput","setShowInput","textIsVisible","setTextIsVisible","input","setInput","isLoading","setIsLoading","messageHistory","setMessageHistory","handleSendMessage","e","preventDefault","trim","newUserMessage","role","content","updatedHistory","setTimeout","endpoint","payload","length","thought","negative_thought","reframed_thought","response","fetch","method","headers","body","JSON","stringify","data","json","responseText","question","conclusion","aiMessage","prev","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","value","onChange","target","placeholder","disabled","autoFocus","type","_c","$RefreshReg$"],"sources":["/Users/przemyslawrakotny/Documents/przemokoduje/full_projects/ai-buddy-mindfull-app/client/src/screens/PerspectiveShiftScreen.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"./PerspectiveShiftScreen.scss\";\n// Nie potrzebujemy już ShatterAnimation, bo kończymy na wniosku AI\n// import ShatterAnimation from '../components/ShatterAnimation';\n\nconst PerspectiveShiftScreen = () => {\n  const navigate = useNavigate();\n  const [displayText, setDisplayText] = useState(\"Jaka myśl Ci teraz ciąży?\");\n  const [showInput, setShowInput] = useState(true);\n  const [textIsVisible, setTextIsVisible] = useState(true);\n\n  const [input, setInput] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [messageHistory, setMessageHistory] = useState([]);\n\n  const handleSendMessage = async (e) => {\n    e.preventDefault();\n    if (!input.trim() || isLoading) return;\n\n    const newUserMessage = { role: \"user\", content: input };\n    const updatedHistory = [...messageHistory, newUserMessage];\n\n    setMessageHistory(updatedHistory);\n    setShowInput(false);\n    setTextIsVisible(false);\n    setIsLoading(true);\n\n    setTimeout(async () => {\n      let endpoint = \"\";\n      let payload = {};\n\n      // Decydujemy, co robić, na podstawie długości rozmowy\n      if (updatedHistory.length === 1) {\n        // To jest pierwsza wiadomość od użytkownika (negatywna myśl)\n        endpoint = \"/api/get-reframing-question\";\n        payload = { thought: input };\n      } else if (updatedHistory.length === 3) {\n        // To druga wiadomość od użytkownika (odpowiedź na pytanie AI)\n        endpoint = \"/api/get-conclusion\";\n        payload = {\n          negative_thought: updatedHistory[0].content,\n          reframed_thought: input, // Wysyłamy odpowiedź jako \"przeformułowanie\"\n        };\n      }\n\n      try {\n        const response = await fetch(`http://localhost:5001${endpoint}`, {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify(payload),\n        });\n        const data = await response.json();\n\n        const responseText = data.question || data.conclusion;\n        const aiMessage = { role: \"assistant\", content: responseText };\n        setMessageHistory((prev) => [...prev, aiMessage]);\n\n        setIsLoading(false);\n        setDisplayText(responseText);\n        setTextIsVisible(true);\n\n        if (updatedHistory.length < 3) {\n          // Jeśli to nie jest ostatni krok, pokaż input znowu\n          setShowInput(true);\n        } else {\n          // Jeśli to ostatni krok (wniosek AI), zakończ ćwiczenie\n        //   setTimeout(() => navigate(\"/\"), 300000); // Wróć do domu po 5s\n        }\n      } catch (error) {\n        /* ... obsługa błędu ... */\n      }\n    }, 500);\n    setInput(\"\");\n  };\n\n  return (\n    <div className=\"perspective-screen\">\n      <div className=\"display-text-area\">\n        {isLoading ? (\n          <div className=\"thinking-indicator\">\n            <span></span>\n            <span></span>\n            <span></span>\n          </div>\n        ) : (\n          <div\n            className={`text-content ${textIsVisible ? \"visible\" : \"hidden\"}`}\n          >\n            {displayText}\n          </div>\n        )}\n      </div>\n\n      {showInput && (\n        <form onSubmit={handleSendMessage} className=\"thought-form single-view\">\n          <textarea\n            value={input}\n            onChange={(e) => setInput(e.target.value)}\n            placeholder=\"Wpisz tutaj...\"\n            disabled={isLoading}\n            autoFocus\n          />\n          <button type=\"submit\" disabled={isLoading || !input.trim()}>\n            Wyślij\n          </button>\n        </form>\n      )}\n    </div>\n  );\n};\n\nexport default PerspectiveShiftScreen;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}